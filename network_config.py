from dataclasses import dataclass
from typing import Dict, Set, List

@dataclass
class NetworkConfig:
    """网络配置类，存储所有网络参数"""
    # 基础参数
    num_paths: int  # 路径数量
    num_od_pairs: int  # OD对数量
    total_demand: float  # 总需求
    od_groups: Dict[str, List[int]]  # OD组

    # 成本参数
    free_flow_time: Dict[int, float]  # 自由流时间
    link_money_cost: Dict[int, float]  # 链路金钱成本
    link_capacity: Dict[int, float]  # 链路容量
    
    # 路径-链接关系
    path_link_matrix: Dict[tuple, float]  # 路径-链接矩阵

    @classmethod
    def create_simple_network(cls):
        """创建简单网络配置"""
        return cls(
            num_paths=8,
            num_od_pairs=6,
            total_demand=10000,
            od_groups={'ALL': list(range(1, 7))},
            free_flow_time={1: 18, 2: 22.5, 3: 12, 4: 24, 5: 2.4, 6: 6, 7: 24, 8: 12},
            link_money_cost={1: 20, 2: 15, 3: 1, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1},
            link_capacity={1: 3600, 2: 3600, 3: 1800, 4: 1800, 5: 1800, 6: 1800, 7: 1800, 8: 1800},
            path_link_matrix={
                (1, 1): 1, (1, 2): 0, (1, 3): 0, (1, 4): 0, (1, 5): 0, (1, 6): 0, (1, 7): 0, (1, 8): 0,
                (2, 1): 0, (2, 2): 1, (2, 3): 0, (2, 4): 0, (2, 5): 0, (2, 6): 0, (2, 7): 0, (2, 8): 0,
                (3, 1): 0, (3, 2): 0, (3, 3): 1, (3, 4): 0, (3, 5): 0, (3, 6): 0, (3, 7): 1, (3, 8): 0,
                (4, 1): 0, (4, 2): 0, (4, 3): 0, (4, 4): 1, (4, 5): 0, (4, 6): 0, (4, 7): 0, (4, 8): 1,
                (5, 1): 0, (5, 2): 0, (5, 3): 1, (5, 4): 0, (5, 5): 1, (5, 6): 0, (5, 7): 0, (5, 8): 1,
                (6, 1): 0, (6, 2): 0, (6, 3): 0, (6, 4): 1, (6, 5): 0, (6, 6): 1, (6, 7): 1, (6, 8): 0
            }
        )

    @classmethod
    def create_path_network(cls):
        """创建路径网络配置"""
        return cls(
            num_paths=19,
            num_od_pairs=14,
            total_demand=3000,
            od_groups={
                'OD1': list(range(1, 9)),
                'OD2': list(range(9, 15))
            },
            free_flow_time={
                1: 10, 2: 10, 3: 10, 4: 40, 5: 10, 6: 10, 7: 10, 8: 20, 9: 10,
                10: 25, 11: 10, 12: 10, 13: 40, 14: 10, 15: 10, 16: 10, 17: 10, 18: 80, 19: 10
            },
            link_money_cost={
                1: 10, 2: 10, 3: 10, 4: 20, 5: 10, 6: 10, 7: 10, 8: 20, 9: 10,
                10: 25, 11: 10, 12: 10, 13: 20, 14: 10, 15: 10, 16: 10, 17: 10, 18: 30, 19: 10
            },
            link_capacity={i: 2500 for i in range(1, 20)},
            path_link_matrix={
                (1, 1): 1, (1, 5): 1, (1, 7): 1, (1, 9): 1, (1, 11): 1,
                (2, 1): 1, (2, 5): 1, (2, 7): 1, (2, 10): 1, (2, 15): 1,
                (3, 1): 1, (3, 5): 1, (3, 8): 1, (3, 14): 1, (3, 15): 1,
                (4, 1): 1, (4, 6): 1, (4, 12): 1, (4, 14): 1, (4, 15): 1,
                (5, 2): 1, (5, 7): 1, (5, 9): 1, (5, 11): 1, (5, 17): 1,
                (6, 2): 1, (6, 7): 1, (6, 10): 1, (6, 15): 1, (6, 17): 1,
                (7, 2): 1, (7, 8): 1, (7, 14): 1, (7, 15): 1, (7, 17): 1,
                (8, 2): 1, (8, 11): 1, (8, 18): 1,
                (9, 1): 1, (9, 5): 1, (9, 7): 1, (9, 10): 1, (9, 16): 1,
                (10, 1): 1, (10, 5): 1, (10, 8): 1, (10, 14): 1, (10, 16): 1,
                (11, 1): 1, (11, 6): 1, (11, 12): 1, (11, 14): 1, (11, 16): 1,
                (12, 1): 1, (12, 13): 1, (12, 19): 1,
                (13, 2): 1, (13, 7): 1, (13, 10): 1, (13, 16): 1, (13, 17): 1,
                (14, 2): 1, (14, 8): 1, (14, 14): 1, (14, 16): 1, (14, 17): 1
            }
        )
